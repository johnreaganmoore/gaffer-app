<div class="mini-header"></div>
<div class="profile-page">
  <div class="container">
    <div class="card">
    <%= form_for(@team_season, url: wizard_path(:season_cost, ts: @team_season.id), method: :put) do |team_season_fields| %>

          <div class="card-content">

            <div class="card-title">
              <h3>Season Cost</h3>
            </div>

            <h5>How much does the season cost for the whole team?</h5>
            <div class="row">
              <div class="input-field col s12">
                <%= team_season_fields.text_field :cost, id: 'cost' %>
                <%= team_season_fields.label :team_cost %>
              </div>
            </div>

            <h5>What is the minimum number of players you are willing to play with?</h5>
            <div class="row">
              <div class="input-field col s12">
                <%= team_season_fields.text_field :min_players, id: 'min_players' %>
                <%= team_season_fields.label :minimum_roster_size %>
              </div>
            </div>

            <h5>What is the maximum number of players you want on the team?</h5>
            <div class="row">
              <div class="input-field col s12">
                <%= team_season_fields.text_field :max_players %>
                <%= team_season_fields.label :max_roster_size %>
              </div>
            </div>

            <h5>The cost per player will be:</h5>
            <div id="player-cost-container">
              <p class="flow-text">$0.00</p>
            </div>

          </div>
        <div class="edit-profile-actions card-action">
          <%= button_tag(type: 'submit', class: "btn waves-effect waves-light") do %>
            Set Season Cost
          <% end %>
        </div>
      <% end %>
    </div>
  </div>
</div>
<script>
  // Closure
  (function() {
    /**
     * Decimal adjustment of a number.
     *
     * @param {String}  type  The type of adjustment.
     * @param {Number}  value The number.
     * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
     * @returns {Number} The adjusted value.
     */
    function decimalAdjust(type, value, exp) {
      // If the exp is undefined or zero...
      if (typeof exp === 'undefined' || +exp === 0) {
        return Math[type](value);
      }
      value = +value;
      exp = +exp;
      // If the value is not a number or the exp is not an integer...
      if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
        return NaN;
      }
      // Shift
      value = value.toString().split('e');
      value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
      // Shift back
      value = value.toString().split('e');
      return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
    }

    // Decimal round
    if (!Math.round10) {
      Math.round10 = function(value, exp) {
        return decimalAdjust('round', value, exp);
      };
    }
    // Decimal floor
    if (!Math.floor10) {
      Math.floor10 = function(value, exp) {
        return decimalAdjust('floor', value, exp);
      };
    }
    // Decimal ceil
    if (!Math.ceil10) {
      Math.ceil10 = function(value, exp) {
        return decimalAdjust('ceil', value, exp);
      };
    }
  })();


  function displayCost(teamCost, minPlayers) {
    var number = Math.ceil10(teamCost / minPlayers, -2).toFixed(2)
    if (number == "NaN") {
      return " Infinity - Whoa, that's expensive."
    }
    return number

  }





  function adjustCost() {
    $('#player-cost-container').html(
      '<p class="flow-text">$' +

      displayCost($('#cost')[0].value, $('#min_players')[0].value)

       + '</p>'
    )
  };

  $('#cost').on('input', function() {
    adjustCost()
  });

  $('#min_players').on('input', function() {
    adjustCost()
  });
</script>
