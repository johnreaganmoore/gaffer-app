<%= form_for @fee do |f| %>
  <div class="card-content">
    <div class="mdl-card__title mdl-card--expand">
      <div class="profile-header">

        <div class="row">
          <div class="input-field col s12 m12 l12">
            <%= f.text_field :label, required: true %>
            <%= f.label :label %>
          </div>
        </div>
        <div class="row">
          <div class="input-field col s12 m12 l12">
            <%= f.text_field :player_amount, value: "0.00", required: true %>
            <%= f.label :player_amount %>
          </div>
        </div>
        <div class="row">
          <div class="input-field col s12 m12 l12">
            <%= f.text_field :total_amount, value: "0.00", required: true %>
            <%= f.label :total_amount %>
          </div>
        </div>


        <%= f.hidden_field :team_id, :value => @team.id %>

      </div>
    </div>
  </div>
<div class="edit-profile-actions card-action">
  <%= button_tag(type: 'submit', class: "btn waves-effect waves-light") do %>
    Save
  <% end %>
</div>
<% end %>

<script>
  // Closure
  (function() {
    /**
     * Decimal adjustment of a number.
     *
     * @param {String}  type  The type of adjustment.
     * @param {Number}  value The number.
     * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
     * @returns {Number} The adjusted value.
     */
    function decimalAdjust(type, value, exp) {
      // If the exp is undefined or zero...
      if (typeof exp === 'undefined' || +exp === 0) {
        return Math[type](value);
      }
      value = +value;
      exp = +exp;
      // If the value is not a number or the exp is not an integer...
      if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
        return NaN;
      }
      // Shift
      value = value.toString().split('e');
      value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
      // Shift back
      value = value.toString().split('e');
      return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
    }

    // Decimal round
    if (!Math.round10) {
      Math.round10 = function(value, exp) {
        return decimalAdjust('round', value, exp);
      };
    }
    // Decimal floor
    if (!Math.floor10) {
      Math.floor10 = function(value, exp) {
        return decimalAdjust('floor', value, exp);
      };
    }
    // Decimal ceil
    if (!Math.ceil10) {
      Math.ceil10 = function(value, exp) {
        return decimalAdjust('ceil', value, exp);
      };
    }
  })();


  function totalFee(playerFee) {
    var cost = Math.ceil10(playerFee * <%= @team.people.length %>).toFixed(2)
    if (cost == "NaN") {
      return "0 - NaN"
    }
    return cost
  }

  function playerFee(totalFee) {
    var cost = Math.ceil10(totalFee / <%= @team.people.length %>).toFixed(2)
    if (cost == "NaN") {
      return "0 - NaN"
    }
    return cost
  }

  $('#fee_player_amount').on('input', function() {
    $('#fee_total_amount').val(totalFee($('#fee_player_amount').val()))
    console.log($('#fee_total_amount').val())
  });

  $('#fee_total_amount').on('input', function() {
    $('#fee_player_amount').val(playerFee($('#fee_total_amount').val()))
    console.log($('#fee_player_amount').val())
  });

</script>
