<%= form_for season do |f| %>
  <div class="card-content">
    <div class="mdl-card__title mdl-card--expand">

        <div class="row">
          <div class="input-field col s12">
            <%= f.text_field :location, id: "autocomplete", required: true, onFocus: "geolocate()", placeholder: "Enter a location" %>
            <%= f.label :season_location %>
          </div>
        </div>

        <div class="row">
          <div class="input-field col s12 m6 l6">
            <%= f.date_field :start_date, class: "datepicker season-date" %>
            <%= f.label :season_start_date %>
          </div>

          <div class="input-field col s12 m6 l6">
            <%= f.text_field :total_games %>
            <%= f.label :total_number_of_games%>
          </div>
        </div>

        <div class="row">
          <div class="input-field col s12 m6 l6">
            <%= f.text_field :cost %>
            <%= f.label :season_cost %>
          </div>

          <div class="input-field col s12 m6 l6">
            <%= collection_select(:season, :timeframe_ids,
            Timeframe.all,
            :id, :friendly_label, {required: true, selected: season.timeframe_ids, prompt: "Select timeframe(s)"}, {multiple: true}) %>
          </div>
        </div>

        <!-- <div class="row">
          <div class="input-field col s12 m6 l6">
            <%= f.select :format, options_for_select([
              ['Select the format', "", {disabled: true, selected: true}],
              ['3 v 3', '3 v 3'],
              ['4 v 4','4 v 4'],
              ['5 v 5','5 v 5'],
              ['6 v 6','6 v 6'],
              ['7 v 7','7 v 7'],
              ['8 v 8','8 v 8'],
              ['9 v 9','9 v 9'],
              ['10 v 10','10 v 10'],
              ['11 v 11','11 v 11']
              ]) %>
            <%= f.label :game_format %>
          </div>

          <div class="input-field col s12 m6 l6">
            <%= f.text_field :website %>
            <%= f.label :season_website %>
          </div>
        </div> -->



        <%= f.hidden_field :location_lat, id: "lat", value: "" %>
        <%= f.hidden_field :location_long, id: "lng", value: "" %>
        <%= f.hidden_field :league_id, value: params[:league] %>

    </div>
  </div>
<div class="edit-profile-actions card-action">
  <%= button_tag(type: 'submit', class: "btn waves-effect waves-light") do %>
    Save
  <% end %>
</div>
<% end %>

<script>
  var placeSearch, autocomplete;
  // var componentForm = {
  //   street_number: 'short_name',
  //   route: 'long_name',
  //   locality: 'long_name',
  //   administrative_area_level_1: 'short_name',
  //   country: 'long_name',
  //   postal_code: 'short_name'
  // };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical
    // location types.
    autocomplete = new google.maps.places.Autocomplete(
        /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
        {types: []});

    // When the user selects an address from the dropdown, populate the address
    // fields in the form.
    autocomplete.addListener('place_changed', logGeometry);
  }

  function logGeometry() {
    document.getElementById("lat").value = autocomplete.getPlace().geometry.location.lat();
    document.getElementById("lng").value = autocomplete.getPlace().geometry.location.lng();
  }



  // function fillInAddress() {
  //   // Get the place details from the autocomplete object.
  //   var place = autocomplete.getPlace();
  //
  //   for (var component in componentForm) {
  //     document.getElementById(component).value = '';
  //     document.getElementById(component).disabled = false;
  //   }
  //
  //   // Get each component of the address from the place details
  //   // and fill the corresponding field on the form.
  //   for (var i = 0; i < place.address_components.length; i++) {
  //     var addressType = place.address_components[i].types[0];
  //     if (componentForm[addressType]) {
  //       var val = place.address_components[i][componentForm[addressType]];
  //       document.getElementById(addressType).value = val;
  //     }
  //   }
  // }

  // Bias the autocomplete object to the user's geographical location,
  // as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        var circle = new google.maps.Circle({
          center: geolocation,
          radius: position.coords.accuracy
        });
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['google_maps_geocoding'] %>&libraries=places&callback=initAutocomplete"
        async defer></script>
